define(["require", "exports", "blockly"], function (require, exports, Blockly) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    Blockly["Msg"]["DATA_TYPE_ARRAY_BOOLEAN"] = "List Boolean";
    Blockly["Msg"]["DATA_TYPE_ARRAY_COLOUR"] = "List Colour";
    Blockly["Msg"]["DATA_TYPE_ARRAY_CONNECTION"] = "List Connection";
    Blockly["Msg"]["DATA_TYPE_ARRAY_IMAGE"] = "List Image";
    Blockly["Msg"]["DATA_TYPE_ARRAY_NUMBER"] = "List Number";
    Blockly["Msg"]["DATA_TYPE_ARRAY_STRING"] = "List String";
    Blockly["Msg"]["DATA_TYPE_BOOLEAN"] = "Boolean";
    Blockly["Msg"]["DATA_TYPE_COLOUR"] = "Colour";
    Blockly["Msg"]["DATA_TYPE_CONNECTION"] = "Connection";
    Blockly["Msg"]["DATA_TYPE_IMAGE"] = "Image";
    Blockly["Msg"]["DATA_TYPE_NUMBER"] = "Number";
    Blockly["Msg"]["DATA_TYPE_STRING"] = "String";
    Blockly["Msg"]["CONTROLS_START_TITLE"] = "start";
    Blockly["Msg"]["CONTROLS_IF_TITLE"] = Blockly["Msg"]["CONTROLS_IF_MSG_IF"];
    Blockly["Msg"]["CONTROLS_REPEAT_EXT_TITLE"] = Blockly["Msg"]["CONTROLS_REPEAT_TITLE"];
    Blockly["Msg"]["CONTROLS_WAIT_TIME_TITLE"] = "wait ms";
    Blockly["Msg"]["CONTROLS_WAIT_FOR_TITLE"] = "wait until";
    Blockly["Msg"]["CONTROLS_WAIT_FOR_OR"] = "or wait until";
    Blockly["Msg"]["MATH_RANDOM_FLOAT_TITLE"] = Blockly["Msg"]["MATH_RANDOM_FLOAT_TITLE_RANDOM"];
    Blockly["Msg"]["LOGIC_NULL_TITLE"] = Blockly["Msg"]["LOGIC_NULL"];
    Blockly["Msg"]["LOGIC_TERNARY_TITLE"] = Blockly["Msg"]["LOGIC_TERNARY_CONDITION"];
    Blockly["Msg"]["TEXT_JOIN_TITLE"] = Blockly["Msg"]["TEXT_JOIN_TITLE_CREATEWITH"];
    Blockly["Msg"]["VARIABLE_GLOBAL_DECLARE_TITLE"] = "variable %1 : %2 ‚Üê";
    Blockly["Msg"]["CONTROLS_REPEAT_EXT_TOOLTIP"] = Blockly["Msg"]["CONTROLS_REPEAT_TOOLTIP"];
    Blockly["Msg"]["CONTROLS_WAIT_TIME_TOOLTIP"] = "wait ms tooltip";
    Blockly["Msg"]["CONTROLS_WAIT_FOR_TOOLTIP"] = "wait until tooltip";
    Blockly["Msg"]["MATH_NUMBER_PROPERTY_TOOLTIP"] = Blockly["Msg"]["MATH_IS_TOOLTIP"];
    Blockly["Msg"]["MATH_ON_LIST_TOOLTIP_AVERAGE"] = Blockly["Msg"]["MATH_ONLIST_TOOLTIP_AVERAGE"];
    Blockly["Msg"]["MATH_ON_LIST_TOOLTIP_MAX"] = Blockly["Msg"]["MATH_ONLIST_TOOLTIP_MAX"];
    Blockly["Msg"]["MATH_ON_LIST_TOOLTIP_MEDIAN"] = Blockly["Msg"]["MATH_ONLIST_TOOLTIP_MEDIAN"];
    Blockly["Msg"]["MATH_ON_LIST_TOOLTIP_MIN"] = Blockly["Msg"]["MATH_ONLIST_TOOLTIP_MIN"];
    Blockly["Msg"]["MATH_ON_LIST_TOOLTIP_MODE"] = Blockly["Msg"]["MATH_ONLIST_TOOLTIP_MODE"];
    Blockly["Msg"]["MATH_ON_LIST_TOOLTIP_RANDOM"] = Blockly["Msg"]["MATH_ONLIST_TOOLTIP_RANDOM"];
    Blockly["Msg"]["MATH_ON_LIST_TOOLTIP_STD_DEV"] = Blockly["Msg"]["MATH_ONLIST_TOOLTIP_STD_DEV"];
    Blockly["Msg"]["MATH_ON_LIST_TOOLTIP_SUM"] = Blockly["Msg"]["MATH_ONLIST_TOOLTIP_SUM"];
    Blockly["Msg"]["TEXT_TOOLTIP"] = Blockly["Msg"]["TEXT_TEXT_TOOLTIP"];
    Blockly["Msg"]["TEXT_COMMENT_TOOLTIP"] = "text comment tooltip";
    Blockly["Msg"]["VARIABLES_GLOBAL_DEFAULT_NAME"] = "item";
    Blockly["Msg"]["VARIABLES_LOCAL_DEFAULT_NAME"] = "param";
    Blockly["Msg"]["VARIABLES_PROC_DEFAULT_NAME"] = "param";
    Blockly["Msg"]["VARIABLES_LOOP_DEFAULT_NAME"] = "i";
    Blockly["Msg"]["VARIABLES_SET"] = "set %1 to %2";
    Blockly["Msg"]["VARIABLES_SCOPE_WARNING"] = "Warning: This block may only be used in the scope of it's declaration block";
});
//# sourceMappingURL=nepo.msg.js.map