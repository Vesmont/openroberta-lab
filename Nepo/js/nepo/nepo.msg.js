define(["require", "exports", "blockly"], function (require, exports, Blockly) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    Blockly.Msg["ADD_COMMENT"] = "Add Comment";
    Blockly.Msg["ACTION_ANALOGIN"] = "actuator analog";
    Blockly.Msg["ACTION_BUZZER"] = "buzzer";
    Blockly.Msg["ACTION_BUZZER_ARDUINO"] = "buzzer HYT120";
    Blockly.Msg["ACTION_DIGITALIN"] = "actuator digital";
    Blockly.Msg["ACTION_EVAL"] = "eval";
    Blockly.Msg["ACTION_EVAL_AS"] = "as";
    Blockly.Msg["ACTION_FOURDIGITDISPLAY"] = "4-Digit Display";
    Blockly.Msg["ACTION_IN"] = "actuator";
    Blockly.Msg["ACTION_INFRARED"] = "infrared emitter";
    Blockly.Msg["ACTION_LCD"] = "LCD 1602";
    Blockly.Msg["ACTION_LCDI2C"] = "LCD 1602 I²C";
    Blockly.Msg["ACTION_LCDI2C_SENSEBOX"] = "OLED Display I²C";
    Blockly.Msg["ACTION_LED"] = "LED";
    Blockly.Msg["ACTION_LEDBAR"] = "LED Bar";
    Blockly.Msg["ACTION_MOTOR"] = "motor";
    Blockly.Msg["ACTION_PLAY"] = "play";
    Blockly.Msg["ACTION_PLOTTING"] = "plot";
    Blockly.Msg["ACTION_PLOT_CLEAR"] = "clear the plot";
    Blockly.Msg["ACTION_PLOT_CLEAR_TOOLTIP"] = "Removes all the data from the plot.";
    Blockly.Msg["ACTION_PLOT_POINT"] = "plot a point on";
    Blockly.Msg["ACTION_PLOT_POINT_TOOLTIP"] = "Plots a point with specified value (Y axis) at the specified tickmark (X axis).";
    Blockly.Msg["ACTION_PLOT_TICKMARK"] = "at tickmark";
    Blockly.Msg["ACTION_RELAY"] = "relay SRD-05VDC-SL-C";
    Blockly.Msg["ACTION_RGBLED"] = "RGB LED";
    Blockly.Msg["ACTION_SDCARD"] = "SD card";
    Blockly.Msg["ACTION_SERIAL_PRINT"] = "show on Serial Monitor";
    Blockly.Msg["ACTION_SERIAL_PRINT_TOOLTIP"] = "Show data on the Serial Monitor. You can find the Serial Monitor in the USB Programm on top, under View.";
    Blockly.Msg["ACTION_SERVO"] = "servo motor";
    Blockly.Msg["ACTION_SERVO_ARDUINO"] = "servo motor SG90";
    Blockly.Msg["ACTION_STEPMOTOR"] = "step motor";
    Blockly.Msg["ACTION_WIRELESS"] = "WiFi connection.";
    Blockly.Msg["CANNOT_DELETE_VARIABLE_PROCEDURE"] = "Can't delete the variable '%1' because it's part of the definition of the function '%2'";
    Blockly.Msg["CHANGE_VALUE"] = "Change value:";
    Blockly.Msg["CLEAN_UP"] = "Clean up Blocks";
    Blockly.Msg["COLLAPSED_WARNINGS_WARNING"] = "Collapsed blocks contain warnings.";
    Blockly.Msg["COLLAPSE_ALL"] = "Collapse Blocks";
    Blockly.Msg["COLLAPSE_BLOCK"] = "Collapse Block";
    Blockly.Msg["COLOUR_BLEND_COLOUR1"] = "colour 1";
    Blockly.Msg["COLOUR_BLEND_COLOUR2"] = "colour 2";
    Blockly.Msg["COLOUR_BLEND_RATIO"] = "ratio";
    Blockly.Msg["COLOUR_BLEND"] = "blend";
    Blockly.Msg["COLOUR_BLEND_TOOLTIP"] = "Blends two colours together with a given ratio (0.0 - 1.0).";
    Blockly.Msg["COLOUR_PICKER_TOOLTIP"] = "Choose a colour from the palette.";
    Blockly.Msg["COLOUR_RANDOM"] = "random colour";
    Blockly.Msg["COLOUR_RANDOM_TOOLTIP"] = "Choose a colour at random.";
    Blockly.Msg["COLOUR_RGB_BLUE"] = "blue";
    Blockly.Msg["COLOUR_RGB_GREEN"] = "green";
    Blockly.Msg["COLOUR_RGB_RED"] = "red";
    Blockly.Msg["COLOUR_RGB"] = "colour with";
    Blockly.Msg["COLOUR_RGB_TOOLTIP"] = "Create a colour with the specified amount of red, green, and blue. All values must be between 0 and 100.";
    Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK"] = "break out of loop";
    Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE"] = "continue with next iteration of loop";
    Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK"] = "Break out of the containing loop.";
    Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE"] = "Skip the rest of this loop, and continue with the next iteration.";
    Blockly.Msg["CONTROLS_FLOW_STATEMENTS_WARNING"] = "Warning: This block may only be used within a loop.";
    Blockly.Msg["CONTROLS_FOREACH"] = "for each item %1 in list %2";
    Blockly.Msg["CONTROLS_FOREACH_TOOLTIP"] = "For each item in a list, set the variable '%1' to the item, and then do some statements.";
    Blockly.Msg["CONTROLS_FOR"] = "count with %1 from %2 to %3 by %4";
    Blockly.Msg["CONTROLS_FOR_TOOLTIP"] = "Have the variable '%1' take on the values from the start number to the end number, counting by the specified interval, and do the specified blocks.";
    Blockly.Msg["CONTROLS_IF_ELSEIF_TOOLTIP"] = "Add a condition to the if block.";
    Blockly.Msg["CONTROLS_IF_ELSE_TOOLTIP"] = "Add a final, catch-all condition to the if block.";
    Blockly.Msg["CONTROLS_IF_IF_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this if block.";
    Blockly.Msg["CONTROLS_IF_MSG_ELSE"] = "else";
    Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"] = "else if";
    Blockly.Msg["CONTROLS_IF_MSG_IF"] = "if";
    Blockly.Msg["CONTROLS_IF_TOOLTIP_1"] = "If a value is true, then do some statements.";
    Blockly.Msg["CONTROLS_IF_TOOLTIP_2"] = "If a value is true, then do the first block of statements. Otherwise, do the second block of statements.";
    Blockly.Msg["CONTROLS_IF_TOOLTIP_3"] = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements.";
    Blockly.Msg["CONTROLS_IF_TOOLTIP_4"] = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements. If none of the values are true, do the last block of statements.";
    Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"] = "do";
    Blockly.Msg["CONTROLS_REPEAT"] = "repeat %1 times";
    Blockly.Msg["CONTROLS_REPEAT_TOOLTIP"] = "Do some statements several times.";
    Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_UNTIL"] = "repeat until";
    Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_WHILE"] = "repeat while";
    Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL"] = "While a value is false, then do some statements.";
    Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_WHILE"] = "While a value is true, then do some statements.";
    Blockly.Msg["DELETE_ALL_BLOCKS"] = "Delete all %1 blocks?";
    Blockly.Msg["DELETE_BLOCK"] = "Delete Block";
    Blockly.Msg["DELETE_VARIABLE"] = "Delete the '%1' variable";
    Blockly.Msg["DELETE_VARIABLE_CONFIRMATION"] = "Delete %1 uses of the '%2' variable?";
    Blockly.Msg["DELETE_X_BLOCKS"] = "Delete %1 Blocks";
    Blockly.Msg["DISABLE_BLOCK"] = "Disable Block";
    Blockly.Msg["DUPLICATE_BLOCK"] = "Duplicate";
    Blockly.Msg["DUPLICATE_COMMENT"] = "Duplicate Comment";
    Blockly.Msg["ENABLE_BLOCK"] = "Enable Block";
    Blockly.Msg["EXPAND_ALL"] = "Expand Blocks";
    Blockly.Msg["EXPAND_BLOCK"] = "Expand Block";
    Blockly.Msg["EXTERNAL_INPUTS"] = "External Inputs";
    Blockly.Msg["HELP"] = "Help";
    Blockly.Msg["INLINE_INPUTS"] = "Inline Inputs";
    Blockly.Msg["IOS_CANCEL"] = "Cancel";
    Blockly.Msg["IOS_ERROR"] = "Error";
    Blockly.Msg["IOS_OK"] = "OK";
    Blockly.Msg["IOS_PROCEDURES_ADD_INPUT"] = "+ Add Input";
    Blockly.Msg["IOS_PROCEDURES_ALLOW_STATEMENTS"] = "Allow statements";
    Blockly.Msg["IOS_PROCEDURES_DUPLICATE_INPUTS_ERROR"] = "This function has duplicate inputs.";
    Blockly.Msg["IOS_PROCEDURES_INPUTS"] = "INPUTS";
    Blockly.Msg["IOS_VARIABLES_ADD_BUTTON"] = "Add";
    Blockly.Msg["IOS_VARIABLES_ADD_VARIABLE"] = "+ Add Variable";
    Blockly.Msg["IOS_VARIABLES_DELETE_BUTTON"] = "Delete";
    Blockly.Msg["IOS_VARIABLES_EMPTY_NAME_ERROR"] = "You can't use an empty variable name.";
    Blockly.Msg["IOS_VARIABLES_RENAME_BUTTON"] = "Rename";
    Blockly.Msg["IOS_VARIABLES_VARIABLE_NAME"] = "Variable name";
    Blockly.Msg["LISTS_CREATE_EMPTY"] = "create empty list";
    Blockly.Msg["LISTS_CREATE_EMPTY_TOOLTIP"] = "Returns a list, of length 0, containing no data records";
    Blockly.Msg["LISTS_CREATE_WITH_CONTAINER_ADD"] = "list";
    Blockly.Msg["LISTS_CREATE_WITH_CONTAINER_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this list block.";
    Blockly.Msg["LISTS_CREATE_WITH_INPUT_WITH"] = "create list with";
    Blockly.Msg["LISTS_CREATE_WITH_ITEM_TOOLTIP"] = "Add an item to the list.";
    Blockly.Msg["LISTS_CREATE_WITH_TOOLTIP"] = "Create a list with any number of items.";
    Blockly.Msg["LISTS_GET_INDEX_FIRST"] = "first";
    Blockly.Msg["LISTS_GET_INDEX_FROM_END"] = "# from end";
    Blockly.Msg["LISTS_GET_INDEX_FROM_START"] = "#";
    Blockly.Msg["LISTS_GET_INDEX_GET"] = "get";
    Blockly.Msg["LISTS_GET_INDEX_GET_REMOVE"] = "get and remove";
    Blockly.Msg["LISTS_GET_INDEX_LAST"] = "last";
    Blockly.Msg["LISTS_GET_INDEX_RANDOM"] = "random";
    Blockly.Msg["LISTS_GET_INDEX_REMOVE"] = "remove";
    Blockly.Msg["LISTS_GET_INDEX_TAIL"] = "";
    Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FIRST"] = "Returns the first item in a list.";
    Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FROM"] = "Returns the item at the specified position in a list.";
    Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_LAST"] = "Returns the last item in a list.";
    Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_RANDOM"] = "Returns a random item in a list.";
    Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST"] = "Removes and returns the first item in a list.";
    Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM"] = "Removes and returns the item at the specified position in a list.";
    Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST"] = "Removes and returns the last item in a list.";
    Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM"] = "Removes and returns a random item in a list.";
    Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST"] = "Removes the first item in a list.";
    Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM"] = "Removes the item at the specified position in a list.";
    Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST"] = "Removes the last item in a list.";
    Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM"] = "Removes a random item in a list.";
    Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_END"] = "to # from end";
    Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_START"] = "to #";
    Blockly.Msg["LISTS_GET_SUBLIST_END_LAST"] = "to last";
    Blockly.Msg["LISTS_GET_SUBLIST_START_FIRST"] = "get sub-list from first";
    Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_END"] = "get sub-list from # from end";
    Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_START"] = "get sub-list from #";
    Blockly.Msg["LISTS_GET_SUBLIST_TAIL"] = "";
    Blockly.Msg["LISTS_GET_SUBLIST_TOOLTIP"] = "Creates a copy of the specified portion of a list.";
    Blockly.Msg["LISTS_INDEX_FROM_END_TOOLTIP"] = "%1 is the last item.";
    Blockly.Msg["LISTS_INDEX_FROM_START_TOOLTIP"] = "%1 is the first item.";
    Blockly.Msg["LISTS_INDEX_OF_FIRST"] = "find first occurrence of item";
    Blockly.Msg["LISTS_INDEX_OF_LAST"] = "find last occurrence of item";
    Blockly.Msg["LISTS_INDEX_OF_TOOLTIP"] = "Returns the index of the first/last occurrence of the item in the list. Returns %1 if item is not found.";
    Blockly.Msg["LISTS_INLIST"] = "in list";
    Blockly.Msg["LISTS_ISEMPTY"] = "%1 is empty";
    Blockly.Msg["LISTS_ISEMPTY_TOOLTIP"] = "Returns true if the list is empty.";
    Blockly.Msg["LISTS_LENGTH"] = "length of %1";
    Blockly.Msg["LISTS_LENGTH_TOOLTIP"] = "Returns the length of a list.";
    Blockly.Msg["LISTS_REPEAT"] = "create list with item %1 repeated %2 times";
    Blockly.Msg["LISTS_REPEAT_TOOLTIP"] = "Creates a list consisting of the given value repeated the specified number of times.";
    Blockly.Msg["LISTS_REVERSE_MESSAGE0"] = "reverse %1";
    Blockly.Msg["LISTS_REVERSE_TOOLTIP"] = "Reverse a copy of a list.";
    Blockly.Msg["LISTS_SET_INDEX_INPUT_TO"] = "as";
    Blockly.Msg["LISTS_SET_INDEX_INSERT"] = "insert at";
    Blockly.Msg["LISTS_SET_INDEX_SET"] = "set";
    Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST"] = "Inserts the item at the start of a list.";
    Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FROM"] = "Inserts the item at the specified position in a list.";
    Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_LAST"] = "Append the item to the end of a list.";
    Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM"] = "Inserts the item randomly in a list.";
    Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FIRST"] = "Sets the first item in a list.";
    Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FROM"] = "Sets the item at the specified position in a list.";
    Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_LAST"] = "Sets the last item in a list.";
    Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_RANDOM"] = "Sets a random item in a list.";
    Blockly.Msg["LISTS_SORT_ORDER_ASCENDING"] = "ascending";
    Blockly.Msg["LISTS_SORT_ORDER_DESCENDING"] = "descending";
    Blockly.Msg["LISTS_SORT"] = "sort %1 %2 %3";
    Blockly.Msg["LISTS_SORT_TOOLTIP"] = "Sort a copy of a list.";
    Blockly.Msg["LISTS_SORT_TYPE_IGNORECASE"] = "alphabetic, ignore case";
    Blockly.Msg["LISTS_SORT_TYPE_NUMERIC"] = "numeric";
    Blockly.Msg["LISTS_SORT_TYPE_TEXT"] = "alphabetic";
    Blockly.Msg["LISTS_SPLIT_LIST_FROM_TEXT"] = "make list from text";
    Blockly.Msg["LISTS_SPLIT_TEXT_FROM_LIST"] = "make text from list";
    Blockly.Msg["LISTS_SPLIT_TOOLTIP_JOIN"] = "Join a list of texts into one text, separated by a delimiter.";
    Blockly.Msg["LISTS_SPLIT_TOOLTIP_SPLIT"] = "Split text into a list of texts, breaking at each delimiter.";
    Blockly.Msg["LISTS_SPLIT_WITH_DELIMITER"] = "with delimiter";
    Blockly.Msg["LOGIC_BOOLEAN_FALSE"] = "false";
    Blockly.Msg["LOGIC_BOOLEAN_TOOLTIP"] = "Returns either true or false.";
    Blockly.Msg["LOGIC_BOOLEAN_TRUE"] = "true";
    Blockly.Msg["LOGIC_COMPARE_TOOLTIP_EQ"] = "Return true if both inputs equal each other.";
    Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GT"] = "Return true if the first input is greater than the second input.";
    Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GTE"] = "Return true if the first input is greater than or equal to the second input.";
    Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LT"] = "Return true if the first input is smaller than the second input.";
    Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LTE"] = "Return true if the first input is smaller than or equal to the second input.";
    Blockly.Msg["LOGIC_COMPARE_TOOLTIP_NEQ"] = "Return true if both inputs are not equal to each other.";
    Blockly.Msg["LOGIC_NEGATE"] = "not %1";
    Blockly.Msg["LOGIC_NEGATE_TOOLTIP"] = "Returns true if the input is false. Returns false if the input is true.";
    Blockly.Msg["LOGIC_NULL"] = "null";
    Blockly.Msg["LOGIC_NULL_TOOLTIP"] = "Returns null.";
    Blockly.Msg["LOGIC_OPERATION_AND"] = "and";
    Blockly.Msg["LOGIC_OPERATION_OR"] = "or";
    Blockly.Msg["LOGIC_OPERATION_TOOLTIP_AND"] = "Return true if both inputs are true.";
    Blockly.Msg["LOGIC_OPERATION_TOOLTIP_OR"] = "Return true if at least one of the inputs is true.";
    Blockly.Msg["LOGIC_TERNARY_CONDITION"] = "test";
    Blockly.Msg["LOGIC_TERNARY_IF_FALSE"] = "if false";
    Blockly.Msg["LOGIC_TERNARY_IF_TRUE"] = "if true";
    Blockly.Msg["LOGIC_TERNARY_TOOLTIP"] = "Check the condition in 'test'. If the condition is true, returns the 'if true' value; otherwise returns the 'if false' value.";
    Blockly.Msg["MATH_ADDITION_SYMBOL"] = "+";
    Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_ADD"] = "Return the sum of the two numbers.";
    Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_DIVIDE"] = "Return the quotient of the two numbers.";
    Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MINUS"] = "Return the difference of the two numbers.";
    Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MULTIPLY"] = "Return the product of the two numbers.";
    Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_POWER"] = "Return the first number raised to the power of the second number.";
    Blockly.Msg["MATH_ATAN2"] = "atan2 of X:%1 Y:%2";
    Blockly.Msg["MATH_ATAN2_TOOLTIP"] = "Return the arctangent of point (X, Y) in degrees from -180 to 180.";
    Blockly.Msg["MATH_CHANGE"] = "change %1 by %2";
    Blockly.Msg["MATH_CHANGE_TOOLTIP"] = "Add a number to variable '%1'.";
    Blockly.Msg["MATH_CONSTANT_TOOLTIP"] = "Return one of the common constants: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), or ∞ (infinity).";
    Blockly.Msg["MATH_CONSTRAIN"] = "constrain %1 low %2 high %3";
    Blockly.Msg["MATH_CONSTRAIN_TOOLTIP"] = "Constrain a number to be between the specified limits (inclusive).";
    Blockly.Msg["MATH_DIVISION_SYMBOL"] = "÷";
    Blockly.Msg["MATH_IS_DIVISIBLE_BY"] = "is divisible by";
    Blockly.Msg["MATH_IS_EVEN"] = "is even";
    Blockly.Msg["MATH_IS_NEGATIVE"] = "is negative";
    Blockly.Msg["MATH_IS_ODD"] = "is odd";
    Blockly.Msg["MATH_IS_POSITIVE"] = "is positive";
    Blockly.Msg["MATH_IS_PRIME"] = "is prime";
    Blockly.Msg["MATH_IS_TOOLTIP"] = "Check if a number is an even, odd, prime, whole, positive, negative, or if it is divisible by certain number. Returns true or false.";
    Blockly.Msg["MATH_IS_WHOLE"] = "is whole";
    Blockly.Msg["MATH_MODULO"] = "remainder of %1 ÷ %2";
    Blockly.Msg["MATH_MODULO_TOOLTIP"] = "Return the remainder from dividing the two numbers.";
    Blockly.Msg["MATH_MULTIPLICATION_SYMBOL"] = "×";
    Blockly.Msg["MATH_NUMBER_TOOLTIP"] = "A number.";
    Blockly.Msg["MATH_ONLIST_OPERATOR_AVERAGE"] = "average of list";
    Blockly.Msg["MATH_ONLIST_OPERATOR_MAX"] = "max of list";
    Blockly.Msg["MATH_ONLIST_OPERATOR_MEDIAN"] = "median of list";
    Blockly.Msg["MATH_ONLIST_OPERATOR_MIN"] = "min of list";
    Blockly.Msg["MATH_ONLIST_OPERATOR_MODE"] = "modes of list";
    Blockly.Msg["MATH_ONLIST_OPERATOR_RANDOM"] = "random item of list";
    Blockly.Msg["MATH_ONLIST_OPERATOR_STD_DEV"] = "standard deviation of list";
    Blockly.Msg["MATH_ONLIST_OPERATOR_SUM"] = "sum of list";
    Blockly.Msg["MATH_ONLIST_TOOLTIP_AVERAGE"] = "Return the average (arithmetic mean) of the numeric values in the list.";
    Blockly.Msg["MATH_ONLIST_TOOLTIP_MAX"] = "Return the largest number in the list.";
    Blockly.Msg["MATH_ONLIST_TOOLTIP_MEDIAN"] = "Return the median number in the list.";
    Blockly.Msg["MATH_ONLIST_TOOLTIP_MIN"] = "Return the smallest number in the list.";
    Blockly.Msg["MATH_ONLIST_TOOLTIP_MODE"] = "Return a list of the most common item(s) in the list.";
    Blockly.Msg["MATH_ONLIST_TOOLTIP_RANDOM"] = "Return a random element from the list.";
    Blockly.Msg["MATH_ONLIST_TOOLTIP_STD_DEV"] = "Return the standard deviation of the list.";
    Blockly.Msg["MATH_ONLIST_TOOLTIP_SUM"] = "Return the sum of all the numbers in the list.";
    Blockly.Msg["MATH_POWER_SYMBOL"] = "^";
    Blockly.Msg["MATH_RANDOM_FLOAT_RANDOM"] = "random fraction";
    Blockly.Msg["MATH_RANDOM_FLOAT_TOOLTIP"] = "Return a random fraction between 0.0 (inclusive) and 1.0 (exclusive).";
    Blockly.Msg["MATH_RANDOM_INT"] = "random integer from %1 to %2";
    Blockly.Msg["MATH_RANDOM_INT_TOOLTIP"] = "Return a random integer between the two specified limits, inclusive.";
    Blockly.Msg["MATH_ROUND_OPERATOR_ROUND"] = "round";
    Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDDOWN"] = "round down";
    Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDUP"] = "round up";
    Blockly.Msg["MATH_ROUND_TOOLTIP"] = "Round a number up or down.";
    Blockly.Msg["MATH_SINGLE_OP_ABSOLUTE"] = "absolute";
    Blockly.Msg["MATH_SINGLE_OP_ROOT"] = "square root";
    Blockly.Msg["MATH_SINGLE_TOOLTIP_ABS"] = "Return the absolute value of a number.";
    Blockly.Msg["MATH_SINGLE_TOOLTIP_EXP"] = "Return e to the power of a number.";
    Blockly.Msg["MATH_SINGLE_TOOLTIP_LN"] = "Return the natural logarithm of a number.";
    Blockly.Msg["MATH_SINGLE_TOOLTIP_LOG10"] = "Return the base 10 logarithm of a number.";
    Blockly.Msg["MATH_SINGLE_TOOLTIP_NEG"] = "Return the negation of a number.";
    Blockly.Msg["MATH_SINGLE_TOOLTIP_POW10"] = "Return 10 to the power of a number.";
    Blockly.Msg["MATH_SINGLE_TOOLTIP_ROOT"] = "Return the square root of a number.";
    Blockly.Msg["MATH_SUBTRACTION_SYMBOL"] = "-";
    Blockly.Msg["MATH_TRIG_ACOS"] = "acos";
    Blockly.Msg["MATH_TRIG_ASIN"] = "asin";
    Blockly.Msg["MATH_TRIG_ATAN"] = "atan";
    Blockly.Msg["MATH_TRIG_COS"] = "cos";
    Blockly.Msg["MATH_TRIG_SIN"] = "sin";
    Blockly.Msg["MATH_TRIG_TAN"] = "tan";
    Blockly.Msg["MATH_TRIG_TOOLTIP_ACOS"] = "Return the arccosine of a number.";
    Blockly.Msg["MATH_TRIG_TOOLTIP_ASIN"] = "Return the arcsine of a number.";
    Blockly.Msg["MATH_TRIG_TOOLTIP_ATAN"] = "Return the arctangent of a number.";
    Blockly.Msg["MATH_TRIG_TOOLTIP_COS"] = "Return the cosine of a degree (not radian).";
    Blockly.Msg["MATH_TRIG_TOOLTIP_SIN"] = "Return the sine of a degree (not radian).";
    Blockly.Msg["MATH_TRIG_TOOLTIP_TAN"] = "Return the tangent of a degree (not radian).";
    Blockly.Msg["NEW_COLOUR_VARIABLE"] = "Create colour variable...";
    Blockly.Msg["NEW_NUMBER_VARIABLE"] = "Create number variable...";
    Blockly.Msg["NEW_STRING_VARIABLE"] = "Create string variable...";
    Blockly.Msg["NEW_VARIABLE"] = "Create variable...";
    Blockly.Msg["NEW_VARIABLE"] = "New variable name:";
    Blockly.Msg["NEW_VARIABLE_TYPE"] = "New variable type:";
    Blockly.Msg["ORDINAL_NUMBER_SUFFIX"] = "";
    Blockly.Msg["PROCEDURES_ALLOW_STATEMENTS"] = "allow statements";
    Blockly.Msg["PROCEDURES_BEFORE_PARAMS"] = "with:";
    Blockly.Msg["PROCEDURES_CALLNORETURN_TOOLTIP"] = "Run the user-defined function '%1'.";
    Blockly.Msg["PROCEDURES_CALLRETURN_TOOLTIP"] = "Run the user-defined function '%1' and use its output.";
    Blockly.Msg["PROCEDURES_CALL_BEFORE_PARAMS"] = "with:";
    Blockly.Msg["PROCEDURES_CREATE_DO"] = "Create '%1'";
    Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"] = "Describe this function...";
    Blockly.Msg["PROCEDURES_DEFNORETURN_DO"] = "";
    Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"] = "do something";
    Blockly.Msg["PROCEDURES_DEFNORETURN"] = "to";
    Blockly.Msg["PROCEDURES_DEFNORETURN_TOOLTIP"] = "Creates a function with no output.";
    Blockly.Msg["PROCEDURES_DEFRETURN_RETURN"] = "return";
    Blockly.Msg["PROCEDURES_DEFRETURN_TOOLTIP"] = "Creates a function with an output.";
    Blockly.Msg["PROCEDURES_DEF_DUPLICATE_WARNING"] = "Warning: This function has duplicate parameters.";
    Blockly.Msg["PROCEDURES_HIGHLIGHT_DEF"] = "Highlight function definition";
    Blockly.Msg["PROCEDURES_IFRETURN_TOOLTIP"] = "If a value is true, then return a second value.";
    Blockly.Msg["PROCEDURES_IFRETURN_WARNING"] = "Warning: This block may be used only within a function definition.";
    Blockly.Msg["PROCEDURES_MUTATORARG"] = "input name:";
    Blockly.Msg["PROCEDURES_MUTATORARG_TOOLTIP"] = "Add an input to the function.";
    Blockly.Msg["PROCEDURES_MUTATORCONTAINER"] = "inputs";
    Blockly.Msg["PROCEDURES_MUTATORCONTAINER_TOOLTIP"] = "Add, remove, or reorder inputs to this function.";
    Blockly.Msg["REDO"] = "Redo";
    Blockly.Msg["REMOVE_COMMENT"] = "Remove Comment";
    Blockly.Msg["RENAME_VARIABLE"] = "Rename variable...";
    Blockly.Msg["RENAME_VARIABLE"] = "Rename all '%1' variables to:";
    Blockly.Msg["TEXT_APPEND"] = "to %1 append text %2";
    Blockly.Msg["TEXT_APPEND_TOOLTIP"] = "Append some text to variable '%1'.";
    Blockly.Msg["TEXT_CHANGECASE_OPERATOR_LOWERCASE"] = "to lower case";
    Blockly.Msg["TEXT_CHANGECASE_OPERATORCASE"] = "to Title Case";
    Blockly.Msg["TEXT_CHANGECASE_OPERATOR_UPPERCASE"] = "to UPPER CASE";
    Blockly.Msg["TEXT_CHANGECASE_TOOLTIP"] = "Return a copy of the text in a different case.";
    Blockly.Msg["TEXT_CHARAT_FIRST"] = "get first letter";
    Blockly.Msg["TEXT_CHARAT_FROM_END"] = "get letter # from end";
    Blockly.Msg["TEXT_CHARAT_FROM_START"] = "get letter #";
    Blockly.Msg["TEXT_CHARAT_LAST"] = "get last letter";
    Blockly.Msg["TEXT_CHARAT_RANDOM"] = "get random letter";
    Blockly.Msg["TEXT_CHARAT_TAIL"] = "";
    Blockly.Msg["TEXT_CHARAT"] = "in text %1 %2";
    Blockly.Msg["TEXT_CHARAT_TOOLTIP"] = "Returns the letter at the specified position.";
    Blockly.Msg["TEXT_COUNT_MESSAGE0"] = "count %1 in %2";
    Blockly.Msg["TEXT_COUNT_TOOLTIP"] = "Count how many times some text occurs within some other text.";
    Blockly.Msg["TEXT_CREATE_JOIN_ITEM_TOOLTIP"] = "Add an item to the text.";
    Blockly.Msg["TEXT_CREATE_JOIN_JOIN"] = "join";
    Blockly.Msg["TEXT_CREATE_JOIN_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this text block.";
    Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_END"] = "to letter # from end";
    Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_START"] = "to letter #";
    Blockly.Msg["TEXT_GET_SUBSTRING_END_LAST"] = "to last letter";
    Blockly.Msg["TEXT_GET_SUBSTRING_INPUT_IN_TEXT"] = "in text";
    Blockly.Msg["TEXT_GET_SUBSTRING_START_FIRST"] = "get substring from first letter";
    Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_END"] = "get substring from letter # from end";
    Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_START"] = "get substring from letter #";
    Blockly.Msg["TEXT_GET_SUBSTRING_TAIL"] = "";
    Blockly.Msg["TEXT_GET_SUBSTRING_TOOLTIP"] = "Returns a specified portion of the text.";
    Blockly.Msg["TEXT_INDEXOF_OPERATOR_FIRST"] = "find first occurrence of text";
    Blockly.Msg["TEXT_INDEXOF_OPERATOR_LAST"] = "find last occurrence of text";
    Blockly.Msg["TEXT_INDEXOF"] = "in text %1 %2 %3";
    Blockly.Msg["TEXT_INDEXOF_TOOLTIP"] = "Returns the index of the first/last occurrence of the first text in the second text. Returns %1 if text is not found.";
    Blockly.Msg["TEXT_ISEMPTY"] = "%1 is empty";
    Blockly.Msg["TEXT_ISEMPTY_TOOLTIP"] = "Returns true if the provided text is empty.";
    Blockly.Msg["TEXT_JOIN_CREATEWITH"] = "create text with";
    Blockly.Msg["TEXT_JOIN_TOOLTIP"] = "Create a piece of text by joining together any number of items.";
    Blockly.Msg["TEXT_LENGTH"] = "length of %1";
    Blockly.Msg["TEXT_LENGTH_TOOLTIP"] = "Returns the number of letters (including spaces) in the provided text.";
    Blockly.Msg["TEXT_PRINT"] = "print %1";
    Blockly.Msg["TEXT_PRINT_TOOLTIP"] = "Print the specified text, number or other value.";
    Blockly.Msg["TEXT_PROMPT_TOOLTIP_NUMBER"] = "Prompt for user for a number.";
    Blockly.Msg["TEXT_PROMPT_TOOLTIP_TEXT"] = "Prompt for user for some text.";
    Blockly.Msg["TEXT_PROMPT_TYPE_NUMBER"] = "prompt for number with message";
    Blockly.Msg["TEXT_PROMPT_TYPE_TEXT"] = "prompt for text with message";
    Blockly.Msg["TEXT_REPLACE_MESSAGE0"] = "replace %1 with %2 in %3";
    Blockly.Msg["TEXT_REPLACE_TOOLTIP"] = "Replace all occurances of some text within some other text.";
    Blockly.Msg["TEXT_REVERSE_MESSAGE0"] = "reverse %1";
    Blockly.Msg["TEXT_REVERSE_TOOLTIP"] = "Reverses the order of the characters in the text.";
    Blockly.Msg["TEXT_TEXT_TOOLTIP"] = "A letter, word, or line of text.";
    Blockly.Msg["TEXT_TRIM_OPERATOR_BOTH"] = "trim spaces from both sides of";
    Blockly.Msg["TEXT_TRIM_OPERATOR_LEFT"] = "trim spaces from left side of";
    Blockly.Msg["TEXT_TRIM_OPERATOR_RIGHT"] = "trim spaces from right side of";
    Blockly.Msg["TEXT_TRIM_TOOLTIP"] = "Return a copy of the text with spaces removed from one or both ends.";
    Blockly.Msg["TODAY"] = "Today";
    Blockly.Msg["UNDO"] = "Undo";
    Blockly.Msg["UNNAMED_KEY"] = "unnamed";
    Blockly.Msg["VARIABLES_DEFAULT_NAME"] = "item";
    Blockly.Msg["VARIABLES_GET_CREATE_SET"] = "Create 'set %1'";
    Blockly.Msg["VARIABLES_GET_TOOLTIP"] = "Returns the value of this variable.";
    Blockly.Msg["VARIABLES_SET"] = "set %1 to %2";
    Blockly.Msg["VARIABLES_SET_CREATE_GET"] = "Create 'get %1'";
    Blockly.Msg["VARIABLES_SET_TOOLTIP"] = "Sets this variable to be equal to the input.";
    Blockly.Msg["VARIABLE_ALREADY_EXISTS"] = "A variable named '%1' already exists.";
    Blockly.Msg["VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE"] = "A variable named '%1' already exists for another type: '%2'.";
    Blockly.Msg["WORKSPACE_ARIA_LABEL"] = "Blockly Workspace";
    Blockly.Msg["WORKSPACE_COMMENT_DEFAULT_TEXT"] = "Say something...";
    Blockly.Msg["CONTROLS_FOREACH_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
    Blockly.Msg["CONTROLS_FOR_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
    Blockly.Msg["CONTROLS_IF_ELSEIF_ELSEIF"] = Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"];
    Blockly.Msg["CONTROLS_IF_ELSE_ELSE"] = Blockly.Msg["CONTROLS_IF_MSG_ELSE"];
    Blockly.Msg["CONTROLS_IF_IF_IF"] = Blockly.Msg["CONTROLS_IF_MSG_IF"];
    Blockly.Msg["CONTROLS_IF_MSG_THEN"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
    Blockly.Msg["CONTROLS_WHILEUNTIL_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
    Blockly.Msg["LISTS_CREATE_WITH_ITEM"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
    Blockly.Msg["LISTS_GET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
    Blockly.Msg["LISTS_GET_SUBLIST_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
    Blockly.Msg["LISTS_INDEX_OF_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
    Blockly.Msg["LISTS_SET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
    Blockly.Msg["MATH_CHANGE_ITEM"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
    Blockly.Msg["PROCEDURES_DEFRETURN_COMMENT"] = Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"];
    Blockly.Msg["PROCEDURES_DEFRETURN_DO"] = Blockly.Msg["PROCEDURES_DEFNORETURN_DO"];
    Blockly.Msg["PROCEDURES_DEFRETURN_PROCEDURE"] = Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"];
    Blockly.Msg["PROCEDURES_DEFRETURN"] = Blockly.Msg["PROCEDURES_DEFNORETURN"];
    Blockly.Msg["TEXT_APPEND_VARIABLE"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
    Blockly.Msg["TEXT_CREATE_JOIN_ITEM_ITEM"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
    Blockly.Msg["DATA_TYPE_ARRAY_BOOLEAN"] = "List Boolean";
    Blockly.Msg["DATA_TYPE_ARRAY_COLOUR"] = "List Colour";
    Blockly.Msg["DATA_TYPE_ARRAY_CONNECTION"] = "List Connection";
    Blockly.Msg["DATA_TYPE_ARRAY_IMAGE"] = "List Image";
    Blockly.Msg["DATA_TYPE_ARRAY_NUMBER"] = "List Number";
    Blockly.Msg["DATA_TYPE_ARRAY_STRING"] = "List String";
    Blockly.Msg["DATA_TYPE_BOOLEAN"] = "Boolean";
    Blockly.Msg["DATA_TYPE_COLOUR"] = "Colour";
    Blockly.Msg["DATA_TYPE_CONNECTION"] = "Connection";
    Blockly.Msg["DATA_TYPE_IMAGE"] = "Image";
    Blockly.Msg["DATA_TYPE_NUMBER"] = "Number";
    Blockly.Msg["DATA_TYPE_STRING"] = "String";
    Blockly.Msg["CONTROLS_START"] = "start";
    Blockly.Msg["CONTROLS_IF"] = Blockly.Msg["CONTROLS_IF_MSG_IF"];
    Blockly.Msg["CONTROLS_REPEAT_EXT"] = Blockly.Msg["CONTROLS_REPEAT"];
    Blockly.Msg["CONTROLS_WAIT_TIME"] = "wait ms";
    Blockly.Msg["CONTROLS_WAIT_FOR"] = "wait until";
    Blockly.Msg["CONTROLS_WAIT_FOR_OR"] = "or wait until";
    Blockly.Msg["MATH_RANDOM_FLOAT"] = Blockly.Msg["MATH_RANDOM_FLOAT_RANDOM"];
    Blockly.Msg["LOGIC_NULL"] = Blockly.Msg["LOGIC_NULL"];
    Blockly.Msg["LOGIC_TERNARY"] = Blockly.Msg["LOGIC_TERNARY_CONDITION"];
    Blockly.Msg["TEXT_JOIN"] = Blockly.Msg["TEXT_JOIN_CREATEWITH"];
    Blockly.Msg["VARIABLE_DECLARE"] = "variable %1 : %2 ←";
    Blockly.Msg["CONTROLS_REPEAT_EXT_TOOLTIP"] = Blockly.Msg["CONTROLS_REPEAT_TOOLTIP"];
    Blockly.Msg["CONTROLS_WAIT_TIME_TOOLTIP"] = "wait ms tooltip";
    Blockly.Msg["CONTROLS_WAIT_FOR_TOOLTIP"] = "wait until tooltip";
    Blockly.Msg["MATH_NUMBER_PROPERTY_TOOLTIP"] = Blockly.Msg["MATH_IS_TOOLTIP"];
    Blockly.Msg["MATH_ON_LIST_TOOLTIP_AVERAGE"] = Blockly.Msg["MATH_ONLIST_TOOLTIP_AVERAGE"];
    Blockly.Msg["MATH_ON_LIST_TOOLTIP_MAX"] = Blockly.Msg["MATH_ONLIST_TOOLTIP_MAX"];
    Blockly.Msg["MATH_ON_LIST_TOOLTIP_MEDIAN"] = Blockly.Msg["MATH_ONLIST_TOOLTIP_MEDIAN"];
    Blockly.Msg["MATH_ON_LIST_TOOLTIP_MIN"] = Blockly.Msg["MATH_ONLIST_TOOLTIP_MIN"];
    Blockly.Msg["MATH_ON_LIST_TOOLTIP_MODE"] = Blockly.Msg["MATH_ONLIST_TOOLTIP_MODE"];
    Blockly.Msg["MATH_ON_LIST_TOOLTIP_RANDOM"] = Blockly.Msg["MATH_ONLIST_TOOLTIP_RANDOM"];
    Blockly.Msg["MATH_ON_LIST_TOOLTIP_STD_DEV"] = Blockly.Msg["MATH_ONLIST_TOOLTIP_STD_DEV"];
    Blockly.Msg["MATH_ON_LIST_TOOLTIP_SUM"] = Blockly.Msg["MATH_ONLIST_TOOLTIP_SUM"];
    Blockly.Msg["TEXT_TOOLTIP"] = Blockly.Msg["TEXT_TEXT_TOOLTIP"];
    Blockly.Msg["TEXT_COMMENT_TOOLTIP"] = "text comment tooltip";
    Blockly.Msg["VARIABLES_GLOBAL_DEFAULT_NAME"] = "item";
    Blockly.Msg["VARIABLES_LOCAL_DEFAULT_NAME"] = "item";
    Blockly.Msg["VARIABLES_PROC_DEFAULT_NAME"] = "param";
    Blockly.Msg["VARIABLES_LOOP_DEFAULT_NAME"] = "i";
    Blockly.Msg["VARIABLES_SCOPE_WARNING"] = "Warning: This block may only be used in the scope of it's declaration block";
    Blockly.Msg["PROCEDURES_DEF_PROCEDURE"] = "doSomething";
    Blockly.Msg["CONFIGURATION_NO_PORT"] = "no port";
    Blockly.Msg["SENSOR_ACCELEROMETER"] = "accelerometer";
    Blockly.Msg["SENSOR_ACCELEROMETER_GETSAMPLE_TOOLTIP"] = "Get the tilt or rotations in degrees.";
    Blockly.Msg["SENSOR_ACCELEROMETER_VALUE_GETSAMPLE_TOOLTIP"] = "Get the tilt or rotations in degrees.";
    Blockly.Msg["SENSOR_ACCELEROMETER_X_GETSAMPLE_TOOLTIP_ARDUINO"] = "Returns the acceleration value on the X axis in g. Can be in range from -4 g to 4 g.";
    Blockly.Msg["SENSOR_ACCELEROMETER_X_GETSAMPLE_TOOLTIP_SENSEBOX"] = "Returns the acceleration value on the X axis in g. Can be in range from -2 g to 2 g.";
    Blockly.Msg["SENSOR_ACCELEROMETER_Y_GETSAMPLE_TOOLTIP_ARDUINO"] = "Returns the acceleration value on the Y axis in g. Can be in range from -4 g to 4 g.";
    Blockly.Msg["SENSOR_ACCELEROMETER_Y_GETSAMPLE_TOOLTIP_SENSEBOX"] = "Returns the acceleration value on the Y axis in g. Can be in range from -2 g to 2 g.";
    Blockly.Msg["SENSOR_ACCELEROMETER_Z_GETSAMPLE_TOOLTIP_ARDUINO"] = "Returns the acceleration value on the Z axis in g. Can be in range from -4 g to 4 g.";
    Blockly.Msg["SENSOR_ACCELEROMETER_Z_GETSAMPLE_TOOLTIP_SENSEBOX"] = "Returns the acceleration value on the Z axis in g. Can be in range from -2 g to 2 g.";
    Blockly.Msg["SENSOR_AMBIENTLIGHT"] = "ambientlight sensor";
    Blockly.Msg["SENSOR_ANALOGOUT"] = "sensor analog";
    Blockly.Msg["SENSOR_ANY"] = "anyplace";
    Blockly.Msg["SENSOR_ARM_TOOLTIP"] = "Returns true, if the selected part of the arm is touched, otherwise false.";
    Blockly.Msg["SENSOR_BATTERY"] = "battery charge";
    Blockly.Msg["SENSOR_BATTERY_GETSAMPLE_TOOLTIP"] = "Gets the current voltage from the battery.";
    Blockly.Msg["SENSOR_BOTTOM"] = "bottom";
    Blockly.Msg["SENSOR_CALIBRATE"] = "calibrate";
    Blockly.Msg["SENSOR_CODE"] = "code pad";
    Blockly.Msg["SENSOR_COLOUR"] = "colour sensor";
    Blockly.Msg["SENSOR_COLOUR_AMBIENTLIGHT_GETSAMPLE_TOOLTIP"] = "Gets the current ambient light reading from the sensor.";
    Blockly.Msg["SENSOR_COLOUR_COLOUR_GETSAMPLE_TOOLTIP"] = "Gets the current colour reading from the sensor.";
    Blockly.Msg["SENSOR_COLOUR_EDISON"] = "line tracker";
    Blockly.Msg["SENSOR_COLOUR_GETSAMPLE_TOOLTIP"] = "Gets the current reading from the colour sensor.";
    Blockly.Msg["SENSOR_COLOUR_LIGHT_GETSAMPLE_TOOLTIP"] = "Gets the current brightness reading from the sensor.";
    Blockly.Msg["SENSOR_COLOUR_RGB_GETSAMPLE_TOOLTIP"] = Blockly.Msg["SENSOR_COLOUR_RGB_GETSAMPLE_TOOLTIP"];
    Blockly.Msg["SENSOR_COMPASS"] = "compass sensor";
    Blockly.Msg["SENSOR_COMPASS_EV3"] = "HT compass sensor";
    Blockly.Msg["SENSOR_COMPASS_GETSAMPLE_TOOLTIP"] = "Gets the current reading from the compass sensor.";
    Blockly.Msg["SENSOR_DETECTFACE"] = "face detector";
    Blockly.Msg["SENSOR_DETECTFACE_GETSAMPLE_TOOLTIP"] = "Detect a face previously learned and saved.";
    Blockly.Msg["SENSOR_DETECTMARK"] = "NAO Mark sensor";
    Blockly.Msg["SENSOR_DETECTMARK_GETSAMPLE_TOOLTIP"] = "Returns one or an array of IDs (number) of the last detected NAO Mark(s). If no marks are detected, -1 or an array consisting of 1 element with value -1 is returned. For a list of NAO marks with corresponding numbers refer to the wiki.";
    Blockly.Msg["SENSOR_DIGITALOUT"] = "sensor digital";
    Blockly.Msg["SENSOR_DROP"] = "drop sensor";
    Blockly.Msg["SENSOR_DROP_GETSAMPLE_TOOLTIP"] = "Gets the current reading from the drop sensor in percent.";
    Blockly.Msg["SENSOR_DROP_OFF"] = "drop-off sensor";
    Blockly.Msg["SENSOR_ELECTRICCURRENT"] = "current sensor";
    Blockly.Msg["SENSOR_ELECTRICCURRENT_GETSAMPLE_TOOLTIP"] = "Get the electric current from the motorboard in the selected joint.";
    Blockly.Msg["SENSOR_ENCODER"] = "encoder";
    Blockly.Msg["SENSOR_ENCODER_GETSAMPLE_TOOLTIP"] = "Gets the current reading from the motor encoder.";
    Blockly.Msg["SENSOR_FLAME"] = "flame sensor";
    Blockly.Msg["SENSOR_FLAME_GETSAMPLE_TOOLTIP"] = "Gets the current reading from the flame sensor.";
    Blockly.Msg["SENSOR_FSR"] = "force-sensing resistor";
    Blockly.Msg["SENSOR_FSR_GETSAMPLE_TOOLTIP"] = "Get the current reading from the force sensitive resistor under the feet of the robot.";
    Blockly.Msg["SENSOR_GESTURE"] = "gesture";
    Blockly.Msg["SENSOR_GESTURE_ACTIVE"] = "active?";
    Blockly.Msg["SENSOR_GESTURE_DOWN"] = "upside down";
    Blockly.Msg["SENSOR_GESTURE_DOWN_GETSAMPLE_TOOLTIP"] = "Returns »true« if the posture is down.";
    Blockly.Msg["SENSOR_GESTURE_FACE_DOWN"] = "at the front side";
    Blockly.Msg["SENSOR_GESTURE_FACE_DOWN_GETSAMPLE_TOOLTIP"] = "Returns »true« if the posture is face down.";
    Blockly.Msg["SENSOR_GESTURE_FACE_UP"] = "at the back";
    Blockly.Msg["SENSOR_GESTURE_FACE_UP_GETSAMPLE_TOOLTIP"] = "Returns »true« if the posture is face up.";
    Blockly.Msg["SENSOR_GESTURE_FREEFALL"] = "freely falling";
    Blockly.Msg["SENSOR_GESTURE_FREEFALL_GETSAMPLE_TOOLTIP"] = "Returns »true« if it is free falling.";
    Blockly.Msg["SENSOR_GESTURE_SHAKE"] = "shaking";
    Blockly.Msg["SENSOR_GESTURE_SHAKE_GETSAMPLE_TOOLTIP"] = "Returns »true« if it is shaken.";
    Blockly.Msg["SENSOR_GESTURE_TOOLTIP"] = "Is the system in the selected state?";
    Blockly.Msg["SENSOR_GESTURE_UP"] = "upright";
    Blockly.Msg["SENSOR_GESTURE_UP_GETSAMPLE_TOOLTIP"] = "Returns »true« if the posture is upright.";
    Blockly.Msg["SENSOR_GET"] = "get";
    Blockly.Msg["SENSOR_GET_SAMPLE"] = "get value";
    Blockly.Msg["SENSOR_GPS_ALTITUDE_GETSAMPLE_TOOLTIP_SENSEBOX"] = "Returns the altitude in meters.";
    Blockly.Msg["SENSOR_GPS_DATE_GETSAMPLE_TOOLTIP_SENSEBOX"] = "Returns the current date.";
    Blockly.Msg["SENSOR_GPS_LATITUDE_GETSAMPLE_TOOLTIP_SENSEBOX"] = "Returns the latitude in degree.";
    Blockly.Msg["SENSOR_GPS_LONGITUDE_GETSAMPLE_TOOLTIP_SENSEBOX"] = "Returns the longitude in degree.";
    Blockly.Msg["SENSOR_GPS_SENSEBOX"] = "GPS receiver";
    Blockly.Msg["SENSOR_GPS_SPEED_GETSAMPLE_TOOLTIP_SENSEBOX"] = "Returns the speed in km/h.";
    Blockly.Msg["SENSOR_GPS_TIME_GETSAMPLE_TOOLTIP_SENSEBOX"] = "Returns the current time.";
    Blockly.Msg["SENSOR_GROVE"] = "Grove";
    Blockly.Msg["SENSOR_GYRO"] = "gyroscope";
    Blockly.Msg["SENSOR_GYRO_GETSAMPLE_TOOLTIP"] = Blockly.Msg["GYRO_GETSAMPLE_TOOLTIP"];
    Blockly.Msg["SENSOR_GYRO_TILTED_GETSAMPLE_TOOLTIP_WEDO"] = "Is the tilt sensors position the indicated manner?";
    Blockly.Msg["SENSOR_GYRO_WEDO"] = "tilt sensor";
    Blockly.Msg["SENSOR_GYRO_X_GETSAMPLE_TOOLTIP_ARDUINO"] = "Returns the gyroscope output on the X axis in degrees per second. Can be in range from -2000 °/s to 2000 °/s.";
    Blockly.Msg["SENSOR_GYRO_Y_GETSAMPLE_TOOLTIP_ARDUINO"] = "Returns the gyroscope output on the Y axis in degrees per second. Can be in range from -2000 °/s to 2000 °/s.";
    Blockly.Msg["SENSOR_GYRO_Z_GETSAMPLE_TOOLTIP_ARDUINO"] = "Returns the gyroscope output on the Z axis in degrees per second. Can be in range from -2000 °/s to 2000 °/s.";
    Blockly.Msg["SENSOR_HTCOLOUR"] = "HT colour sensor";
    Blockly.Msg["SENSOR_HTCOLOUR_AMBIENTLIGHT_GETSAMPLE_TOOLTIP"] = Blockly.Msg["SENSOR_COLOUR_AMBIENTLIGHT_GETSAMPLE_TOOLTIP"];
    Blockly.Msg["SENSOR_HTCOLOUR_COLOUR_GETSAMPLE_TOOLTIP"] = Blockly.Msg["SENSOR_COLOUR_COLOUR_GETSAMPLE_TOOLTIP"];
    Blockly.Msg["SENSOR_HTCOLOUR_GETSAMPLE_TOOLTIP"] = Blockly.Msg["SENSOR_COLOUR_GETSAMPLE_TOOLTIP"];
    Blockly.Msg["SENSOR_HTCOLOUR_LIGHT_GETSAMPLE_TOOLTIP"] = Blockly.Msg["SENSOR_COLOUR_LIGHT_GETSAMPLE_TOOLTIP"];
    Blockly.Msg["SENSOR_HTCOLOUR_RGB_GETSAMPLE_TOOLTIP"] = Blockly.Msg["SENSOR_COLOUR_RGB_GETSAMPLE_TOOLTIP"];
    Blockly.Msg["SENSOR_HUMIDITY"] = "humidity sensor";
    Blockly.Msg["SENSOR_HUMIDITY_ARDUINO"] = "humidity sensor DHT11";
    Blockly.Msg["SENSOR_HUMIDITY_GETSAMPLE_TOOLTIP"] = "Gets the current reading from the humidity sensor in percent.";
    Blockly.Msg["SENSOR_HUMIDITY_HUMIDITY_GETSAMPLE_TOOLTIP"] = Blockly.Msg["SENSOR_HUMIDITY_GETSAMPLE_TOOLTIP"];
    Blockly.Msg["SENSOR_HUMIDITY_SENSEBOX"] = "humidity/temperature sensor HDC1080";
    Blockly.Msg["SENSOR_HUMIDITY_TEMPERATURE_GETSAMPLE_TOOLTIP"] = Blockly.Msg["TEMPERATURE_GETSAMPLE_TOOLTIP"];
    Blockly.Msg["SENSOR_INFRARED"] = "infrared sensor";
    Blockly.Msg["SENSOR_INFRARED_DISTANCE_GETSAMPLE_TOOLTIP"] = Blockly.Msg["INFRARED_DISTANCE_GETSAMPLE_TOOLTIP"];
    Blockly.Msg["SENSOR_INFRARED_DISTANCE_GETSAMPLE_TOOLTIP_WEDO"] = "Gets the current relative distance from the infrared sensor. The values are between 1, close, and 10, further away.";
    Blockly.Msg["SENSOR_INFRARED_GETSAMPLE_TOOLTIP"] = Blockly.Msg["INFRARED_GETSAMPLE_TOOLTIP"];
    Blockly.Msg["SENSOR_INFRARED_PRESENCE_GETSAMPLE_TOOLTIP"] = Blockly.Msg["INFRARED_PRESENCE_GETSAMPLE_TOOLTIP"];
    Blockly.Msg["SENSOR_IRSEEKER"] = "HT infrared sensor";
    Blockly.Msg["SENSOR_IRSEEKER_EDISON"] = "IR seeker";
    Blockly.Msg["SENSOR_IRSEEKER_GETSAMPLE_TOOLTIP"] = "Gets the position of an infrared beacon.";
    Blockly.Msg["SENSOR_IRSEEKER_RCCODE_GETSAMPLE_TOOLTIP_EDISON"] = "Receives a message from a remote control.";
    Blockly.Msg["SENSOR_IS_ARM"] = "is arm";
    Blockly.Msg["SENSOR_IS_PIN"] = "is";
    Blockly.Msg["SENSOR_IS_PRESSED"] = "pressed?";
    Blockly.Msg["SENSOR_IS_TILTED"] = "tilted?";
    Blockly.Msg["SENSOR_IS_TOUCHED"] = "touched?";
    Blockly.Msg["SENSOR_JOYSTICK"] = "joystick";
    Blockly.Msg["SENSOR_KEY"] = "button";
    Blockly.Msg["SENSOR_KEYPAD"] = "keypad";
    Blockly.Msg["SENSOR_KEY_ANY"] = "any";
    Blockly.Msg["SENSOR_KEY_DOWN"] = "down";
    Blockly.Msg["SENSOR_KEY_ENTER"] = "enter";
    Blockly.Msg["SENSOR_KEY_ESCAPE"] = "escape";
    Blockly.Msg["SENSOR_KEY_GETSAMPLE_TOOLTIP"] = Blockly.Msg["KEY_GETSAMPLE_TOOLTIP"];
    Blockly.Msg["SENSOR_KEY_LEFT"] = "left";
    Blockly.Msg["SENSOR_KEY_PLAY"] = "play";
    Blockly.Msg["SENSOR_KEY_REC"] = "record";
    Blockly.Msg["SENSOR_KEY_RIGHT"] = "right";
    Blockly.Msg["SENSOR_KEY_STOP"] = "stop";
    Blockly.Msg["SENSOR_KEY_UP"] = "up";
    Blockly.Msg["SENSOR_LIGHT"] = "light sensor";
    Blockly.Msg["SENSOR_LIGHTVEML"] = "visible/UV light sensor";
    Blockly.Msg["SENSOR_LIGHTVEML_LIGHT_GETSAMPLE_TOOLTIP"] = "Reads the current value of the visible light sensor in lux. The value is between 0 to 220000 lux.";
    Blockly.Msg["SENSOR_LIGHTVEML_UVLIGHT_GETSAMPLE_TOOLTIP"] = "Reads the current value of the UV light sensor in μW/cm². The value is between 0 and more than 1000.";
    Blockly.Msg["SENSOR_LIGHT_GETSAMPLE_TOOLTIP"] = Blockly.Msg["LIGHT_GETSAMPLE_TOOLTIP"];
    Blockly.Msg["SENSOR_LIGHT_LIGHT_GETSAMPLE_TOOLTIP_EDISON"] = "Gets the current reading of the light sensor";
    Blockly.Msg["SENSOR_LIGHT_LINETRACKER"] = "line tracker";
    Blockly.Msg["SENSOR_MIC"] = "microphone";
    Blockly.Msg["SENSOR_MOISTURE"] = "moisture sensor";
    Blockly.Msg["SENSOR_MOISTURE_GETSAMPLE_TOOLTIP"] = "Gets the current reading from the moisture sensor in percent.";
    Blockly.Msg["SENSOR_MOTION"] = "motion sensor";
    Blockly.Msg["SENSOR_MOTION_ARDUINO"] = "motion sensor HC-SR501";
    Blockly.Msg["SENSOR_MOTION_GETSAMPLE_TOOLTIP"] = "Gets the current reading from the motion sensor (true/false).";
    Blockly.Msg["SENSOR_MS_TIMER"] = "in ms";
    Blockly.Msg["SENSOR_OBSTACLEDETECTOR"] = "Obstacle detector";
    Blockly.Msg["SENSOR_OUT"] = "sensor";
    Blockly.Msg["SENSOR_OUT_ANALOG_GETSAMPLE_TOOLTIP"] = "Returns the value from the specified analog pin. The value is between 0 and 1024.";
    Blockly.Msg["SENSOR_OUT_DIGITAL_GETSAMPLE_TOOLTIP"] = "Returns the value from the specified digital pin. The value is either HIGH »1« or LOW »0«.";
    Blockly.Msg["SENSOR_PARTICLE"] = "SDS011 particle sensor";
    Blockly.Msg["SENSOR_PARTICLE_PM10_GETSAMPLE_TOOLTIP"] = "Reads the current value of PM10 from the particle sensor.";
    Blockly.Msg["SENSOR_PARTICLE_PM25_GETSAMPLE_TOOLTIP"] = "Reads the current value of PM2.5 from the particle sensor.";
    Blockly.Msg["SENSOR_PIN"] = "pin";
    Blockly.Msg["SENSOR_PINTOUCH"] = "pin";
    Blockly.Msg["SENSOR_PINTOUCH_BOB3"] = "arm";
    Blockly.Msg["SENSOR_PINTOUCH_PRESSED_GETSAMPLE_TOOLTIP"] = Blockly.Msg["PIN_ISTOUCHED_TOOLTIP"];
    Blockly.Msg["SENSOR_PIN_ANALOG_GETSAMPLE_TOOLTIP"] = "Returns the value from the specified analog pin. The value is between 0 and 1024.";
    Blockly.Msg["SENSOR_PIN_DIGITAL_GETSAMPLE_TOOLTIP"] = "Returns the value from the specified digital pin. The value is either HIGH »1« or LOW »0«.";
    Blockly.Msg["SENSOR_PIN_PULSEHIGH_GETSAMPLE_TOOLTIP"] = "Returns the pulse HIGH on a pin in microseconds or -1 if no complete pulse was received within the timeout.";
    Blockly.Msg["SENSOR_PIN_PULSELOW_GETSAMPLE_TOOLTIP"] = "Returns the pulse LOW on a pin in microseconds or -1 if no complete pulse was received within the timeout.";
    Blockly.Msg["SENSOR_POTENTIOMETER"] = "potentiometer";
    Blockly.Msg["SENSOR_POTENTIOMETER_GETSAMPLE_TOOLTIP"] = "Gets the current reading from the potentiometer in volts (0-5V).";
    Blockly.Msg["SENSOR_PULSE"] = "pulse sensor";
    Blockly.Msg["SENSOR_PULSE_GETSAMPLE_TOOLTIP"] = "Gets the current reading from the pulse sensor.";
    Blockly.Msg["SENSOR_PULSE_GETSAMPLE_TOOLTIP_ARDUINO"] = "Gets the current reading from the pulse sensor. The value is between 0 and 1023.";
    Blockly.Msg["SENSOR_RADIO_RSSI"] = "radio RSSI sensor";
    Blockly.Msg["SENSOR_RESET"] = "reset";
    Blockly.Msg["SENSOR_RESET_II"] = "";
    Blockly.Msg["SENSOR_RESET_TOOLTIP_EDISON"] = "Resets the sensors and clears the values.";
    Blockly.Msg["SENSOR_RFID"] = "RFID reader";
    Blockly.Msg["SENSOR_RFID_ARDUINO"] = "RFID-RC522 reader";
    Blockly.Msg["SENSOR_RFID_GETSAMPLE_TOOLTIP"] = "Gets the current reading from the RFID reader.";
    Blockly.Msg["SENSOR_RSSI"] = "signal strength";
    Blockly.Msg["SENSOR_RSSI_VALUE_GETSAMPLE_TOOLTIP"] = "Gets the signal strength from the last received message.";
    Blockly.Msg["SENSOR_SONAR"] = "sonar";
    Blockly.Msg["SENSOR_SOUND"] = "sound sensor";
    Blockly.Msg["SENSOR_SOUND_CALLIOPE"] = "microphone";
    Blockly.Msg["SENSOR_SOUND_CLAP_GETSAMPLE_TOOLTIP_EDISON"] = "Is a clap detected?";
    Blockly.Msg["SENSOR_SOUND_GETSAMPLE_TOOLTIP"] = Blockly.Msg["SOUND_GETSAMPLE_TOOLTIP"];
    Blockly.Msg["SENSOR_SOUND_GETSAMPLE_TOOLTIP_CALLIOPE"] = "Gets the current reading from the microphone in % (mapped to 0 - 100). If the value is always low, the value has to be multiplied by 10, because the amplification is missing on the hardware.";
    Blockly.Msg["SENSOR_TEMPERATURE"] = "temperature sensor";
    Blockly.Msg["SENSOR_TEMPERATURE_ARDUINO"] = "temperature sensor TMP36";
    Blockly.Msg["SENSOR_TEMPERATURE_GETSAMPLE_TOOLTIP"] = Blockly.Msg["TEMPERATURE_GETSAMPLE_TOOLTIP"];
    Blockly.Msg["SENSOR_TEMPERATURE_PRESSURE_GETSAMPLE_TOOLTIP"] = "Gets the current reading of the air pressure sensor in Pascal. Normal air pressure is 101325 Pascal.";
    Blockly.Msg["SENSOR_TEMPERATURE_SENSEBOX"] = "temperature/pressure sensor BMP280";
    Blockly.Msg["SENSOR_TEMPERATURE_TEMPERATURE_GETSAMPLE_TOOLTIP"] = Blockly.Msg["TEMPERATURE_GETSAMPLE_TOOLTIP"];
    Blockly.Msg["SENSOR_TIMER"] = "timer";
    Blockly.Msg["SENSOR_TIMER_GETSAMPLE_TOOLTIP"] = "Gets the current reading from the selected timer.";
    Blockly.Msg["SENSOR_TIMER_RESET"] = "reset %1";
    Blockly.Msg["SENSOR_TIMER_RESET_TOOLTIP"] = "Sets the selected timer to 0.";
    Blockly.Msg["SENSOR_TOP"] = "top";
    Blockly.Msg["SENSOR_TOUCH"] = "touch sensor";
    Blockly.Msg["SENSOR_TOUCH_GETSAMPLE_TOOLTIP"] = Blockly.Msg["TOUCH_GETSAMPLE_TOOLTIP"];
    Blockly.Msg["SENSOR_ULTRASONIC"] = "ultrasonic sensor";
    Blockly.Msg["SENSOR_ULTRASONIC_ARDUINO"] = "ultrasonic sensor HC-SR04";
    Blockly.Msg["SENSOR_ULTRASONIC_DISTANCE_GETSAMPLE_TOOLTIP_ARDUINO"] = "Gets the current reading from the ultrasonic sensor in cm. Maximum distance to messure is 400 cm.";
    Blockly.Msg["SENSOR_ULTRASONIC_DISTANCE_GETSAMPLE_TOOLTIP_MBOT"] = "Gets the current reading from the ultrasonic sensor in cm. Maximum distance to messure is 400 cm. Minimum distance tp measure is 3 cm.";
    Blockly.Msg["SENSOR_ULTRASONIC_GETSAMPLE_TOOLTIP"] = Blockly.Msg["ULTRASONIC_GETSAMPLE_TOOLTIP"];
    Blockly.Msg["SENSOR_UNIT_ACCEL"] = "m/s²";
    Blockly.Msg["SENSOR_UNIT_AMPERE"] = "A";
    Blockly.Msg["SENSOR_UNIT_CM"] = "cm";
    Blockly.Msg["SENSOR_UNIT_DEGREE"] = "°";
    Blockly.Msg["SENSOR_UNIT_DEGREE_PER_SECOND"] = "°/s";
    Blockly.Msg["SENSOR_UNIT_IRRADIANCE"] = "μW/cm²";
    Blockly.Msg["SENSOR_UNIT_LUX"] = "lx";
    Blockly.Msg["SENSOR_UNIT_METER"] = "m";
    Blockly.Msg["SENSOR_UNIT_MILLIG"] = "milli-g";
    Blockly.Msg["SENSOR_UNIT_MM"] = "mm";
    Blockly.Msg["SENSOR_UNIT_MS"] = "ms";
    Blockly.Msg["SENSOR_UNIT_NEWTON"] = "N";
    Blockly.Msg["SENSOR_UNIT_OMEGA"] = "ω";
    Blockly.Msg["SENSOR_UNIT_PASCAL"] = "Pascal";
    Blockly.Msg["SENSOR_UNIT_PERCENT"] = "%";
    Blockly.Msg["SENSOR_UNIT_PM"] = "μg/m³";
    Blockly.Msg["SENSOR_UNIT_SPEED"] = "km/h";
    Blockly.Msg["SENSOR_UNIT_VOLT"] = "V";
    Blockly.Msg["SENSOR_VALUE"] = "value";
    Blockly.Msg["SENSOR_WALL"] = "wall sensor";
    Blockly.Msg["MODE_ACCELERATION"] = "acceleration";
    Blockly.Msg["MODE_ALTITUDE"] = "altitude";
    Blockly.Msg["MODE_AMBIENTLIGHT"] = "ambient light";
    Blockly.Msg["MODE_ANALOG"] = "analog value";
    Blockly.Msg["MODE_ANGLE"] = "angle";
    Blockly.Msg["MODE_CLAP"] = "clap";
    Blockly.Msg["MODE_CLOSE"] = "close";
    Blockly.Msg["MODE_COLOUR"] = "colour";
    Blockly.Msg["MODE_COMPASS"] = "compass";
    Blockly.Msg["MODE_CURRENT"] = "current";
    Blockly.Msg["MODE_DATE"] = "date";
    Blockly.Msg["MODE_DEGREE"] = "degree";
    Blockly.Msg["MODE_DIGITAL"] = "digital value";
    Blockly.Msg["MODE_DISTANCE"] = "distance";
    Blockly.Msg["MODE_DOWN"] = Blockly.Msg["SENSOR_GESTURE_DOWN"];
    Blockly.Msg["MODE_FACE_DOWN"] = Blockly.Msg["SENSOR_GESTURE_FACE_DOWN"];
    Blockly.Msg["MODE_FACE_UP"] = Blockly.Msg["SENSOR_GESTURE_FACE_UP"];
    Blockly.Msg["MODE_FREEFALL"] = Blockly.Msg["SENSOR_GESTURE_FREEFALL"];
    Blockly.Msg["MODE_HUMIDITY"] = "humidity";
    Blockly.Msg["MODE_IDALL"] = "IDs (list)";
    Blockly.Msg["MODE_IDONE"] = "ID";
    Blockly.Msg["MODE_INFO"] = "information";
    Blockly.Msg["MODE_LATITUDE"] = "latitude";
    Blockly.Msg["MODE_LIGHT"] = "light";
    Blockly.Msg["MODE_LINE"] = "line";
    Blockly.Msg["MODE_LONGITUDE"] = "longitude";
    Blockly.Msg["MODE_MODULATED"] = "modulated";
    Blockly.Msg["MODE_MOISTURE"] = "moisture";
    Blockly.Msg["MODE_NAMEALL"] = "names (list)";
    Blockly.Msg["MODE_NAMEONE"] = "name";
    Blockly.Msg["MODE_OBSTACLE"] = "obstacle";
    Blockly.Msg["MODE_OPEN"] = "open";
    Blockly.Msg["MODE_ORIENTATION"] = "orientation";
    Blockly.Msg["MODE_PM10"] = "PM10";
    Blockly.Msg["MODE_PM25"] = "PM2.5";
    Blockly.Msg["MODE_PRESENCE"] = "presence";
    Blockly.Msg["MODE_PRESSED"] = "pressed";
    Blockly.Msg["MODE_PRESSURE"] = "pressure";
    Blockly.Msg["MODE_PULSEHIGH"] = "pulse time HIGH";
    Blockly.Msg["MODE_PULSELOW"] = "pulse time LOW";
    Blockly.Msg["MODE_RATE"] = "rate";
    Blockly.Msg["MODE_RCCODE"] = "R/C code";
    Blockly.Msg["MODE_REFLEXION"] = "reflected light";
    Blockly.Msg["MODE_RGB"] = "RGB";
    Blockly.Msg["MODE_ROTATION"] = "rotation";
    Blockly.Msg["MODE_SENSOR1"] = "Light Sensor1";
    Blockly.Msg["MODE_SENSOR2"] = "Light Sensor2";
    Blockly.Msg["MODE_SHAKE"] = Blockly.Msg["SENSOR_GESTURE_SHAKE"];
    Blockly.Msg["MODE_SOUND"] = "sound";
    Blockly.Msg["MODE_SPEED"] = "speed";
    Blockly.Msg["MODE_TEMPERATURE"] = "temperature";
    Blockly.Msg["MODE_TILTED"] = "tilted";
    Blockly.Msg["MODE_TIME"] = "time";
    Blockly.Msg["MODE_UNMODULATED"] = "unmodulated";
    Blockly.Msg["MODE_UP"] = Blockly.Msg["SENSOR_GESTURE_UP"];
    Blockly.Msg["MODE_UVLIGHT"] = "UV light";
    Blockly.Msg["MODE_VALUE"] = "value";
    Blockly.Msg["MODE_WORD"] = "word";
    Blockly.Msg["MODE_X"] = "X-value";
    Blockly.Msg["MODE_Y"] = "Y-value";
    Blockly.Msg["MODE_Z"] = "Z-value";
    Blockly.Msg["GET"] = Blockly.Msg["LISTS_GET_INDEX_GET"];
});
//# sourceMappingURL=nepo.msg.js.map